
<expr>			= <term> {('+' | '-') <term>}
<term>			= <factor> {}
<base>			= [0-9]+/'n'

Expr 	= Sum
Sum     = Product (('+' / '-') Product)*
Product = Power (('*' / '/') Power)*
Power   = Value ('^' Power)?
Value   = [0-9]+ / '(' Expr ')'


Expr 	= Tern
Tern 	= Mod ('?' Expr ':' Expr)
Mod		= Comp ('%' Comp)*
Comp 	= ENq (('>=' / '>' / '<=' / '<') ENq)*
ENq		= And (('==' / '!=') And)*
And 	= Or ('&&' Or)*
Or 		= Base ('||' Base)*
Base 	= [0-9]+ / 'n' / '(' Expr ')'


a % b
a >= b
a > b
a <= b
a < b
a == b
a != b
a && b
a || b

a ? b : c
(a)

Expr 	= 
Mod		= Comp ('%' Comp)*
Comp 	= ENq (('>=' / '>' / '<=' / '<') ENq)*
ENq		= And (('==' / '!=') And)*
And 	= Or ('&&' Or)*
Or 		= Base ('||' Base)*
Base 	= [0-9]+ / '(' Expr ')'




// ----------------------------------------------------------------------------
// Plural forms parser
// ----------------------------------------------------------------------------

/*
                                Simplified Grammar
Expression:
    LogicalOrExpression '?' Expression ':' Expression
    LogicalOrExpression
LogicalOrExpression:
    LogicalAndExpression "||" LogicalOrExpression   // to (a || b) || c
    LogicalAndExpression
LogicalAndExpression:
    EqualityExpression "&&" LogicalAndExpression    // to (a && b) && c
    EqualityExpression
EqualityExpression:
    RelationalExpression "==" RelationalExpression
    RelationalExpression "!=" RelationalExpression
    RelationalExpression
RelationalExpression:
    MultiplicativeExpression '>' MultiplicativeExpression
    MultiplicativeExpression '<' MultiplicativeExpression
    MultiplicativeExpression ">=" MultiplicativeExpression
    MultiplicativeExpression "<=" MultiplicativeExpression
    MultiplicativeExpression
MultiplicativeExpression:
    PmExpression '%' PmExpression
    PmExpression
PmExpression:
    N
    Number
    '(' Expression ')'
*/
